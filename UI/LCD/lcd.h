#ifndef __LCD_H
#define __LCD_H

#include "stdlib.h"
#include "main.h"
#include "lvgl.h"
#include <string.h> // ???????????????????

// LCD?????????
typedef struct
{
	uint16_t width;	  // LCD ????
	uint16_t height;  // LCD ???
	uint16_t id;	  // LCD ID
	uint8_t dir;	  // ?????????????????0????????1????????
	uint16_t wramcmd; // ???дgram???
	uint16_t rramcmd; // ?????gram???
	uint16_t setxcmd; // ????x???????
	uint16_t setycmd; // ????y???????
} _lcd_dev;

// LCD????
extern volatile _lcd_dev lcddev; // ????LCD???????
/////////////////////////////////////?????????///////////////////////////////////
#define USE_HORIZONTAL 1 // ???????????????????? 	0-0???????1-90???????2-180???????3-270?????

//////////////////////////////////////////////////////////////////////////////////
// ????LCD????
#define LCD_W 320
#define LCD_H 480

// TFTLCD???????????????
extern uint16_t POINT_COLOR; // ?????
extern uint16_t BACK_COLOR;	 // ???????.???????

////////////////////////////////////////////////////////////////////
//-----------------LCD??????----------------

// ?????ù?????????????е?????????????14?????????????????????
// ????IO?????????????????????IO?????????????????28????

#define LCD_CS_SET LCD_CS_GPIO_Port->BSRR = LCD_CS_Pin	  // ?????  PE6
#define LCD_RS_SET LCD_DC_GPIO_Port->BSRR = LCD_DC_Pin	  // ????/???? PC0
#define LCD_RST_SET LCD_RESET_GPIO_Port->BSRR = LCD_RESET_Pin // ??λ PC1

#define LCD_CS_CLR LCD_CS_GPIO_Port->BSRR = (uint32_t)LCD_CS_Pin << 16U	   // ?????  PE6
#define LCD_RS_CLR LCD_DC_GPIO_Port->BSRR = (uint32_t)LCD_DC_Pin << 16U	   // ????/???? PC0
#define LCD_RST_CLR LCD_RESET_GPIO_Port->BSRR = (uint32_t)LCD_RESET_Pin << 16U // ??λ PC1

/*
#define LCD_CS_SET HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET)	// ?????
#define LCD_RS_SET HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET)	// ????/????
#define LCD_RST_SET HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET) // ??λ

#define LCD_CS_CLR HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET)	  // ?????
#define LCD_RS_CLR HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET)	  // ????/????
#define LCD_RST_CLR HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET) // ??λ
*/

// ???????
#define WHITE 0xFFFF
#define BLACK 0x0000
#define BLUE 0x001F
#define BRED 0XF81F
#define GRED 0XFFE0
#define GBLUE 0X07FF
#define RED 0xF800
#define MAGENTA 0xF81F
#define GREEN 0x07E0
#define CYAN 0x7FFF
#define YELLOW 0xFFE0
#define BROWN 0XBC40 // ???
#define BRRED 0XFC07 // ????
#define GRAY 0X8430	 // ???
// GUI???

#define DARKBLUE 0X01CF	 // ?????
#define LIGHTBLUE 0X7D7C // ????
#define GRAYBLUE 0X5458	 // ?????
// ????????PANEL?????

#define LIGHTGREEN 0X841F // ????
#define LIGHTGRAY 0XEF5B  // ????(PANNEL)
#define LGRAY 0XC618	  // ????(PANNEL),???????

#define LGRAYBLUE 0XA651 // ??????(?м?????)
#define LBBLUE 0X2B12	 // ??????(??????????)

void LCD_Init(void);
void LCD_DisplayOn(void);
void LCD_DisplayOff(void);
void LCD_Clear(uint16_t Color);
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos);
void LCD_DrawPoint(uint16_t x, uint16_t y);		// ????
uint16_t LCD_ReadPoint(uint16_t x, uint16_t y); // ????
void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
void LCD_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
void LCD_SetWindows(uint16_t xStar, uint16_t yStar, uint16_t xEnd, uint16_t yEnd);

uint8_t LCD_RD_DATA(void); // ???LCD????
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue);
void LCD_WR_DATA(uint8_t data);
uint8_t LCD_ReadReg(uint8_t LCD_Reg);
void LCD_WriteRAM_Prepare(void);
void LCD_WriteRAM(uint16_t RGB_Code);
uint16_t LCD_ReadRAM(void);
uint16_t LCD_BGR2RGB(uint16_t c);
void LCD_SetParam(void);
void Lcd_WriteData_16Bit(uint16_t Data);
void LCD_direction(uint8_t direction);
uint16_t LCD_Read_ID(void);

void LCDDrawPoint(uint16_t x, uint16_t y, uint16_t color);
void LCD_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey, uint16_t color);
void Lcd_WriteData(uint8_t *Data, uint32_t Size);
void LCD_Fill_LVGL(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey, lv_color_t *color_p);
void LCD_Switch_Dir(uint8_t direction);

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi);

#endif



